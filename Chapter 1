t.capitalize()
 首字母大写
t.split()
 以空格分隔
t.find()
 首字母所处index.若不存在,返回-1.
t.replace('a','b')
 替换所有a至b
t.strip('a')
 删除特定leading or lagging字符

import re
dt = re.compile("'[0-9/:\s]+'") #datetime
result = dt.findall(series)
from datetime import datetime
pydt = datetime.strptime(result[0].replace("'",""), '%m/%d/%Y %H:%M:%S')
pydt
print(pydt)
 将txt文件中的时间转化为datetime格式

-----------------------------------------------------------------------------------------------

tuple
 具有index, 无法改变: t =(1, 2.5, 'data')
t.count()
 计出现次数
t.index()
 返回其index

list
 具有index, 可改变t, 可加减: l = [1, 1.25, 'data', [1, 2]]
list(t) 
 将tuple转化为list
l.append(?)
 在末尾处添加
l.extend([?, ?, ?])
 在末尾处添加一列element
l.insert(number, ?)
 在index = number前插入
l.remove(?)
 删除第一次出现的
l.pop(number)
 删除index = number处, 并将其return
del l[?]
 根据index删除
l[a:b]
 第a+1个至第b个, list的index标在各格之间
 
dict
 字典, 可更改, 通过key, 无序, 无法分组: d = {'Name':'Yo', 'Country':'Germany', 'Age':60}
d.keys()
 以dict_keys显示keys
d.values()
 以dict_values显示keys
d.items()
 以dict_items显示keys

set
 无序, 不同element仅出现一次: s = set(['u', 'd', 'ud', 'd', 'du']) ---> {'u', 'd', 'ud', 'du'}
            并自动以字典顺序排列 t = set(['d', 'dd', 'ud', 'du']) 
s.union(t)
 并集
s.intersection(t)
 交集
s.difference(t)
 在s中但不在t中
s.symmetric_difference(t)
 在s或t中但不在其交集中
Application:
from random import randint
l = [randint(0, 10) for i in range(1000)]
 1000个0~10的随机数
s = set(l)

-----------------------------------------------------------------------------------------------

array {list}
v = [1, 2, 3]
m = [v, v, v]
m ---> [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
v[0] = 3
m ---> [[3, 2, 3], [3, 2, 3], [3, 2, 3]]

from copy import deepcopy
v = [1, 2, 3]
m = 3 * [deepcopy(v), ]
m ---> [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
v[0] = 3
m ---> [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
 deepcopy在复制时将对象复制为一个独立的新对象, 故不受原对象变化的影响

import numpy as np
a = np.array([1, 2, 3, 4])
 类型为numpy.ndarray
a[:?]
 构建array, 其中每一行为0:?的element
a.sum()
 所有element的和
a.std()
 所有element的标准差
a.cumsum()
 array的每一行为原array的cumulative sum
a * ? / a ** ? / np.sqrt(a)
 每个elemtnt各自进行乘法, 平方, 开方
b = np.array([a, a * 2])
 构建一个2 * 4的矩阵
b[0]
 显示第一行
b[0,2]
 显示第一行第三列
b.sum(axis = 0)
 每一个第0维度相加, 该维度消失
b.sum(axis = 1)
 每一个第1维度相加, 该维度消失

c = np.zeros((2, 3, 4), dtype = 'i', order = 'C') / or np.ones()
 1. 维度 2. np.array特殊的data type,表示32位int 3.C-like or F-like(Colume-wise)
d = np.ones_like(c, dtype = 'f', order = 'F')
 128位float

dt = np.dtype([('Name', 'S10'), ('Age', 'i4'), ('Height', 'f'), ('Child', 'i4', 2)])
s = np.array([('Smith', 45, 1.83, [0, 1]), ('Jones', 53, 1.76, [2, 2])], dtype = dt)
 每一行, 对应的element有对应的type规定
s['Name']
 显示所有的Name和其type
s['Height'].mean()
 显示所有Height的均值
s[0]['Age']
 显示第1行的age
 
-----------------------------------------------------------------------------------------------

r = np.random.standard_normal((n, m))
s = np.random.standard_normal((n, m))
 n行m列的standard normal random number
r + s
2 * r + 3
 element-wise
np.shape(?)
 表示这个矩阵的各维度的array
r.transpose()
 转置
 方程中都是element-wise
 
np.linespace(a, b, c) # c代表个数
np.arange(a, b, c) # c代表步长
na, nb = np.meshgrid(a, b,..., xj, False, True)
 xj(笛卡尔) / ij(矩阵) False / True(返回稀疏矩阵) True / False(返回原始图像节省内存)
 output 为 ndarray.
 a作为行被复制b次
 b作为行被复制a次
np.random.randn(a, b)
 生成a行b列的随机矩阵standard normal
np.diff(x) == diff(x,1) 
 x[:, 1:size(x, 1)] - x[:, size(x, 1) - 1]
np.tile(x, (a, b))
 将矩阵x复制a,b
w.ravel()
 平铺 fast 
np.fliplr(x)
 矩阵左右颠倒
np.flipud(x)
 矩阵上下颠倒
np.diag(x)
 对角向量, 若x为向量, 则为单位对角矩阵 + diag(x)
np.triu(x)
 返回上三角
np.tril(x)
 返回下三角
 
 ---------------------------------------------------------------------------------------------
 
Visualization
import numpy as np
import matplotlib.pyplot as plt
 
np.random.seed(1000)
y = np.random.standard_normal(20)
 
plt.plot(y)
plt.show()
plt.plot(y.cumsum())
plt.show()
 cumulative sum
 
%matplotlib inline  
 notebook模式下打开命名窗口
%pylab inline 
 ipython模式下打开命名窗口
 除非将代码一次执行,否则,无法叠加绘图,因为在这两种模式下,是要有plt出现,图片会立马show出来.
 
-----------------------------------------------------------------------------------------------

Line Style
'-' # 实线
'–' # 破折线
'-.' # 点划线
':' #虚线

Marker
'o'	# 圆圈	
'.' # 点
'D'	# 菱形	
's'	# 正方形
'h' #	六边形1	
'*' # 星号
'H'	# 六边形2	
'd'	# 小菱形
'_'	# 水平线	
'v' #	一角朝下的三角形
'8' #	八边形	
'<'	# 一角朝左的三角形
'p'	# 五边形	
'>' # 一角朝右的三角形
','	# 像素	
'^' #	一角朝上的三角形
'+'	# 加号	
'\'	# 竖线
'x'	# X

Coler
b # 蓝
g # 绿
r #	红
y #	黄
c #	青
k #	黑	 
m #	洋红
w #	白
or
color = (a, b, c) a,b,c ∈[0, 1]

Background Color
subplot(where, axisbg=(a, b, c) #111

plt.axis([xmin, xmax, ymin, ymax])
xlim(a, b)
ylim(c, d)
 坐标范围
 
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
 可同时画出多条线

plt.figure(1)
 指向图1
plt.subplot(211)
 指向图1的第一张图
plt.plot([1,2,3])

plt.grid(True)
 添加网格
plt.axis('tight')
 坐标变紧
plt.xlabel('?')
plt.ylable('?')
plt.title('?')

plt.plot(y, lw = ?)
 线条宽度
 
fig, ax1 = plt.subplots()
...
ax2 = ax1.twinx()
...
plt.show()

3D
from mpl_toolkits.mplot3d import Axes3D
fig = plt.figure(figure.size = (9, 6))
ax = fig.gca(projection = '3D')
surf = ax.plot_surface(a, b, c, rstride = 2, cstride = 2, cmap = plt.cm.coolwarm, linewidth = 0.5, antialiased = True)
ax.set_xlabel('?')
ax.set_ylabel('?')
ax.set_zlabel('?')
ax.grid(True)
fig.colorbar(surf, shrink = 0.5, aspect = 5)
plt.show()

--------------------------------------------------------------------------------------------------

if statement1:
   ??
   elif statement2:
   ??
   elif statement3:
   ??
   else:
   ??

for item in iterable:
  ???
 
while statement:
  ???
 
def myfunc(x, y, z = 1.5):
   if z >= 1:
     return x
   else:
     return y

def fc(x):
   return x * 2
 等于
lambda x: x * 2

---------------------------------------------------------------------------------------------------

Pandas
import pandas as pd
from pandas import Series, DataFrame

Series
 一维向量, index = label, 可视为固定长度的有序dict
obj = pd.Series([1, 2, 2, 2])
obj.values
obj.index

obj2 = pd.Series([1, 2, 2], index = ['a', 'b', 'c'])
 可根据特定label提取value, 也可根据一组label提取series
 
obj2[obj2 > 0]
obj2 * 2
np.exp(obj2)

s = pd.Series(dict)
s = pd.Series(dict, index = ?)
 可自定dict表示顺序或index
 
pd.isnull(obj)
pd.notnull(obj)
 返回Bool Series

Series可通过匹配key来进行运算

obj.name = '?'
obj.index.name = '?'

DataFrame
 table包含多列且有序, 且列与列可以不同type, 有row index和column index
 
from a dict:
frame = pd.DataFrame(dict)
frame.head()
 显示前五行
pd.DataFrame(dict, column = ['?', ..., '?'])
pd.DataFrame(dict, column = ['?', ..., '?'], index = ['?', ..., '?'])
frame.columns
frame.? == frame['?']
frame.? = a
 则所有行的?均为a， a可为array or series(长度需match, 否则为nah)
frame.loc['?']
 提取某行
del frame['?']
 删除整列
 
若传入的dict为两层, 则外层为列, 内层为行
pp = {'a' : {1 : 1, 2 : 2}, 'b' : {0 : 0, 1 : 1, 2 : 2}}
frame = pd.DataFrame(pp)

frame.T
 转置
frame.index.name = '?'
frame.columns.name = '?'
frame.values
 返回arrays

index在创建后无法更改
labels = pd.Index(np.arange(3))
obj = pd.Series([...], index = labels)
obj2 = obj.reindex(['?', ..., '?'], mehtod = 'ffill') # method default

frame = pd.DataFrame(np.arange(9).reshape((3,3)), index = ..., columns = ...)
frame2 = frame.reindex(?)
frame2 =frame.reindex(columns = ?)
frame.loc[?, ?] #index, columns

obj.drop(?, inplace = True)
 inplace 可不用return新对象
 删除某行
frame.drop([?, ..., ?])
frame.drop(?, axis = 1#or axis = 'columns')

---------------------------------------------------------------------------------------------

Class

class Example(object):
   pass

c = Example()

class Example1(object):
   def _init_(self, a, b):    #automaticly run when a new instance created
      self.a = a   #self automatically pass
      self.b = b
c = Example1(1, 't')
c.a
c.b
c.a = 100
c.yoyo = 'yo'
print c.yoyo

class Example2(object):
   def _init_(self, a, b):    #automaticly run when a new instance created
      self.a = a   #self automatically pass
      self.b = b
   def addition(self):   #不用传入变量
      return self.a + self.b
c.addition()

class Example3(Example1):
   def addition(self):
      return self.a + self.b
c = Example3(2, 3)
c.addition()

