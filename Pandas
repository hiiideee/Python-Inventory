import numpy as np
import pandas as pd

SERIES------------------------------------------------------------------------------------------------------------------
s = pd.Series(data, index = index)
 data: any data type; one-dimensional; could be {dict; ndarray; scalar value}
  if ndarray:
   len(index) = 0 or len(index) = len(data)
  if dict:
   no index passed; ordered by insertion
    if pass index, ordered by new index, and create "NaN" for those index not in dict
   if scalar value:
    must pass index; the value will be replicated;
   
  Property:
   ndarray-like:
    s[i]
     return single value without index
    s[:3]
     return slice(with index)
    s[s > condition]
     return slice under the condition
    s[[1, 2, 3]]
     return slice with index
    np.exp(s)
     calculate all the elements
   dict-like:
    s['a']
     return single value by index
    s['e'] = 1
     insert new or change
    'e' in s
     return Bool
    s.get('f', default)
     return value of 'f' or default(if not default, return None)
    s[1:] + s[:-1]
     when operation, Seires will automatically align index to value; if there is no index match, return 'NaN' for this index;   
    s.dropna()
     delete those 'NaN'
     
  Name:
   s = pd.Series(np.random.randn(5), name = 'something')
   s.name
   s1 = s.rename('anything')
    create new object
   s1.name
   
DATA FRAME-----------------------------------------------------------------------------------------------
 2-dimensional + label + columns of different types
 input: 2-d numpy.ndarray; dict of 1-d dict/ndarray/list/Series; structured ndarray; Series; Dataframe
 
 from dict of Series/Dicts:
  d = {'a':pd.Series([1, 2, 3], index = ['aa', 'bb', 'cc']), 'b':pd.Seires([2, 3, 4, 5], index = ['aa', 'bb', 'cc', 'dd'])}
  df = pd.DataFrame(d)
   if a column does not have index of other column --> NaN
  pd.DataFrame(d, index = ['dd', 'aa'], columns = ['a'])
   return Dataframe according to certain index or columns; if only pass specific set of index, then the index will override the original keys
  
 from dict of ndarrays/lists:
  d = {'a':[1, 2, 3, 4], 'b':[2, 3, 4, 5]}
  pd.DataFrame(d, index = ['aa', 'bb', 'cc', 'dd'])
  
 from structured array:
  data = np.zeros((2,), dtype = [('A', 'i4'), ('B', 'f4'), ('C', 'a10')])
  data[:] = [(1, 2., 'Hello'), (2, 3., 'Yooo')]
  pd.DataFrame(data)
  pd.DataFrame(data, index = [...], columns = ['A', 'C', 'B'])
  
 from list of dicts:
  data = [{'a':1, 'b':2}, {'a':5, 'b':6, 'c':7}]
  pd.DataFrame(data)
   columns header = keys, and if not match, return NaN
 
 from dict of tuples:
  pd.DataFrame({('a', 'b'): {('A', 'B'): 1, ('A', 'C'): 2},('a', 'a'): {('A', 'C'): 3, ('A', 'B'): 4},('a', 'c'): {('A', 'B'): 5, ('A', 'C'): 6},('b', 'a'): {('A', 'C'): 7, ('A', 'B'): 8},('b', 'b'): {('A', 'D'): 9, ('A', 'B'): 10}})
   multiple layers
 
 

